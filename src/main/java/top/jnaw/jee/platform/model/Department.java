package top.jnaw.jee.platform.model;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.jfinal.plugin.activerecord.Page;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import top.jnaw.jee.platform.model.base.BaseDepartment;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Department extends BaseDepartment<Department> {

  public static final Department dao = new Department().dao();

  public static List<Department> getList() {
    return Department.dao.find("SELECT * FROM department");
  }

  public static JSONObject getParentLine(Department child,
      List<Department> list, JSONObject tail) {
    if (null == tail) {
      tail = new JSONObject();
    }

    tail.put("id", child.getId());
    tail.put("name", child.getName());

    if (0 == child.getId()) {
      return tail;
    }

    for (Department d : list) {
      if (d.getId() == child.getPid()) {
        JSONObject tmp = (JSONObject) tail.clone();
        tail.put("child", tmp);
        getParentLine(d, list, tail);
        break;
      }
    }

    return tail;
  }

  public static JSONArray getChildren(List<Department> list, int parent,
      JSONArray tail) {
    if (null == tail) {
      tail = new JSONArray();
    }

    for (Department d : list) {
      if (d.getPid() == parent) {
        JSONObject child = new JSONObject();
        child.put("id", d.getId());
        child.put("name", d.getName());
        if(DepartmentsUsers.dao.find("select * from departments_users where did=?",d.getId())!=null){
          child.put("num",DepartmentsUsers.dao.find("select * from departments_users where did=?",d.getId()).size());
        }else {
          child.put("num", 0);
        }
        JSONArray grandChildren = getChildren(list, d.getId(), null);
        if (!grandChildren.isEmpty()) {
          child.put("children", grandChildren);
        }
        tail.add(child);
      }
    }
    return tail;
  }

  /**
   * 根据部门id获取子部门id（包括当前部门id）
   * @param departmentIdArr
   * @return
   */
  public static Map<String, String> getDepartmentIds(int[] departmentIdArr){
    //查询所有部门（查询子部门时使用）
    List<Department> departmentList = Department.getList();

    String[] childrenIds;
    Map<String, String> departmentMap = new HashMap<>();//存部门id
    for (int a = 0; a < departmentIdArr.length; a++) {
      if (departmentIdArr[a] == -1) {
        break;
      } else {
        departmentMap.put(String.valueOf(departmentIdArr[a]),String.valueOf(departmentIdArr[a]));
        //查询部门下所有子部门
        JSONArray jsonArray = Department.getChildren(departmentList, departmentIdArr[a], null);
        //取子部门id
        if (jsonArray.size() > 0) {
          String childrenStr = jsonArray.toString();
          childrenIds = childrenStr.split("\"id\":");
          for (int i = 0; i < childrenIds.length - 1; i++) {
            departmentMap.put(childrenIds[i + 1].split("}")[0],
              childrenIds[i + 1].split("}")[0]);
          }
        }
      }
    }
    return departmentMap;
  }

  /**
   * 根据部门id查询员工信息
   * @param departmentIds
   * @return
   */
  public static List<Users> getDeparmentPeople(String departmentIds){
    List<Users> userList = null;
      String select = "SELECT"
      + "  users.id   id,"
      + "  users.username,"
      + "  users.name name,"
      + "  users.nickname";
    String except = " FROM departments_users "
      + "  JOIN users ON users.id = departments_users.uid"
      + " WHERE departments_users.did in (" + departmentIds + ")";
    userList = Users.dao.find(select + except);//部门id为ids时的所有员工信息

    return userList;
  }


  public Page<Users> getUsersBydepID( int did,int page,int size){

    Page<Users> list = null;
    //TODO 封装
    if (did != -1) {
      final String select = "SELECT"
        + "  users.id   id,"
        + "  users.username,"
        + "  users.name name,"
        + "  users.nickname";
      final String except = "FROM departments_users "
        + "  JOIN users ON users.id = departments_users.uid"
        + " WHERE departments_users.did = " + did + " ORDER BY id";
      list = Users.dao.paginate(page, size, select, except);
    } else {
      final String select = "SELECT"
        + "  users.id   id,"
        + "  users.username,"
        + "  users.name name,"
        + "  users.nickname";
      final String except = "FROM users";
      list = Users.dao.paginate(page, size, select, except);
    }
    return list;
  }

}
